[
  {
    "objectID": "daily22.html",
    "href": "daily22.html",
    "title": "daily assignment 22",
    "section": "",
    "text": "library(dataRetrieval)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(tsibble)\n\nRegistered S3 method overwritten by 'tsibble':\n  method               from \n  as_tibble.grouped_df dplyr\n\n\n\nAttaching package: 'tsibble'\n\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats 1.0.0     ✔ stringr 1.5.1\n✔ ggplot2 3.5.1     ✔ tibble  3.2.1\n✔ purrr   1.0.4     ✔ tidyr   1.3.1\n✔ readr   2.1.5     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()     masks stats::filter()\n✖ tsibble::interval() masks lubridate::interval()\n✖ dplyr::lag()        masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tsibble)\nlibrary(timetk)\nlibrary(modeltime)\nlibrary(tidymodels)  \n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.7     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.1     ✔ yardstick    1.3.2\n✔ recipes      1.2.1     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n\nlibrary(parsnip)     \nlibrary(prophet)\n\nLoading required package: Rcpp\n\nAttaching package: 'Rcpp'\n\nThe following object is masked from 'package:rsample':\n\n    populate\n\nLoading required package: rlang\n\nAttaching package: 'rlang'\n\nThe following objects are masked from 'package:purrr':\n\n    %@%, flatten, flatten_chr, flatten_dbl, flatten_int, flatten_lgl,\n    flatten_raw, invoke, splice\n\n\n\n# Example: Cache la Poudre River at Mouth (USGS site 06752260)\npoudre_flow &lt;- readNWISdv(siteNumber = \"06752260\",    # Download data from USGS for site 06752260\n                          parameterCd = \"00060\",      # Parameter code 00060 = discharge in cfs)\n                          startDate = \"2013-01-01\",   # Set the start date\n                          endDate = \"2023-12-31\") |&gt;  # Set the end date\n  renameNWISColumns() |&gt;                              # Rename columns to standard names (e.g., \"Flow\", \"Date\")\n  mutate(Date = as.Date(Date)) |&gt;                   # Convert daily Date values into a year-month format (e.g., \"2023 Jan\")\n  group_by(Date) |&gt;                                   # Group the data by the new monthly Date\n  summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month\n\nGET:https://waterservices.usgs.gov/nwis/dv/?site=06752260&format=waterml%2C1.1&ParameterCd=00060&StatCd=00003&startDT=2013-01-01&endDT=2023-12-31\n\n\n\npoudre_ts &lt;- poudre_flow |&gt;\n  as_tsibble(index = Date)\n\n\nmonthly_flow &lt;- poudre_flow %&gt;%\n  mutate(Date = as.Date(Date),\n         Month = floor_date(Date, \"month\")) %&gt;%\n  group_by(Month) %&gt;%\n  summarize(Flow = mean(Flow, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n\nmonthly_ts &lt;- monthly_flow %&gt;%\n  as_tsibble(index = Month) %&gt;%\n  filter(!is.na(Flow))  \n\nmodel_prophet &lt;- prophet_reg() %&gt;%\n  set_engine(\"prophet\") %&gt;%\n  fit(Flow ~ Month, data = monthly_ts)\n\nDisabling weekly seasonality. Run prophet with weekly.seasonality=TRUE to override this.\n\n\nDisabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.\n\nfuture_tbl &lt;- monthly_ts %&gt;%\n  future_frame(.date_var = Month, .length_out = 12)\n\ntail(future_tbl)\n\n# A tibble: 6 × 1\n  Month     \n  &lt;date&gt;    \n1 2024-07-01\n2 2024-08-01\n3 2024-09-01\n4 2024-10-01\n5 2024-11-01\n6 2024-12-01\n\n\n\nfuture_tbl &lt;- future_tbl %&gt;%\n  mutate(Flow = NA_real_)  # Fill in Flow to match structure\n\n\n# Build dataset\nset.seed(123)\nmonthly_data &lt;- tibble(\n  Month = seq.Date(from = as.Date(\"2015-01-01\"), by = \"month\", length.out = 100),\n  Flow = rnorm(100, mean = 20, sd = 5)\n) %&gt;%\n  as_tsibble(index = Month)\n\n# Fit model\nmodel_prophet &lt;- prophet_reg() %&gt;%\n  set_engine(\"prophet\") %&gt;%\n  fit(Flow ~ Month, data = monthly_data)\n\nDisabling weekly seasonality. Run prophet with weekly.seasonality=TRUE to override this.\n\n\nDisabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.\n\n# Create future data (no as_tsibble here!)\nfuture_tbl &lt;- monthly_data %&gt;%\n  future_frame(.date_var = Month, .length_out = 12) %&gt;%\n  mutate(Flow = NA_real_) %&gt;%\n  filter(!is.na(Month))  # Just in case\n\n# Predict using predict() instead of modeltime_forecast\npreds &lt;- predict(model_prophet, new_data = future_tbl)\n\n# Combine predictions with dates\nforecast_tbl &lt;- bind_cols(future_tbl, preds)\n\n# Plot\nggplot(forecast_tbl, aes(x = Month, y = .pred)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Prophet Forecast (Manual)\", y = \"Predicted Flow\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# Prophet Forecast Plot\nggplot(forecast_tbl, aes(x = Month, y = .pred)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Prophet Forecast (Manual)\", y = \"Predicted Flow\") +\n  theme_minimal()"
  }
]